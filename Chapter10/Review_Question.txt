1. When dealing with input and output, how is the variety of devices dealt with in most modern computers?
device drivers sending the input to I/O librarys
2. What, fundamentally, does an istream do?
takes input and reads it into the progran
3. What, funcamentally, does and ostream do?
sends output to a space where it can be used 
4. What, fundamentally, is a file? 
a sequence of bytes
5. What is a file format?
the set of rules that determine what the bytes mean
6. Name four different types of devices that can require I/O for a program?
keyboard, mouse, screen, USB drive
7. What are the four steps for reading a file?
know its name 
open it (for reading)
read in the characters
close it
8. What are the four steps for writing a file?
Name it 
open it (for writing) or create a new file with that name
close it
9. Name and define the four stream states.
good() everything is working fine
eof() the end of the file has been reached
fail() something unexpected happened but we can recover
bad() something happened and we are unable to recover from it
10. Discuss how the following input problems can be resolved:
	a. The user typing an out-of-range value
	ignore the value and ask the user to try again	
	b. Getting no value (end of file)
	ending the program and telling the user that the end of the file has been reached
	c. The user typing something of the wrong type
	ignore the value and ask the user to try again
11. In what way is input usually harder than output
error handling is more complex 
12. In what way is output usually harder than input?
the output may not always be usable by what we are outputing to
13. Why do we (often) want to seperate input and output from computation?
becuase it gets messy and I/O generally requires program specific error messages
14. What are the two most common uses of the istream member function clear()?
to set the state of the istream
15. What are the usual function declarations for << and >> for a user-defined type X? (i.e. How would you begin to define a custom input/output operator for a class named X)
ostream& operator<<(ostream& os, const X& x){
	return os << x;
}
istream& operator>>(istream& is, const X& x){
	is >> x;
	if (!is) return is;
	x = X(x);
	return is;
} 
